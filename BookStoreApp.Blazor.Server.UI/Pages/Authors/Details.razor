@page "/authors/details/{id:int}"
@inject IAuthorService authorService
@inject NavigationManager navManager

<h3>Author Details</h3>

<EditForm Model="Author">
	<fieldset disabled>
		<div class="form-group">
			<label for="firstname">First Name</label>
			<InputText class="form-control" @bind-Value="Author.FirstName" id="firstname" />
			<ValidationMessage For="@(() => Author.FirstName)" />
		</div>
		<br />
		<div class="form-group">
			<label for="lastname">Last Name</label>
			<InputText class="form-control" @bind-Value="Author.LastName" id="lastname" />
			<ValidationMessage For="@(() => Author.LastName)" />
		</div>
		<br />
		<div class="form-group">
			<label for="bio">Biography</label>
			<InputText class="form-control" @bind-Value="Author.Bio" id="bio"bio />
			<ValidationMessage For="@(() => Author.Bio)" />
		</div>
	</fieldset>
    
		<button @onclick="GoToEdit" class="btn btn-warning">
			<span class="oi oi-pencil"></span>
			Edit Author
		</button>
		<button @onclick="BackToList" class="btn btn-outline-secondary">
			<span class="oi oi-media-skip-backward"></span>
			Back To List
		</button>
</EditForm>

@code {
	// parameter must have a "public"
	[Parameter] public int Id { get; set; }

	private AuthorReadOnlyDto Author = new AuthorReadOnlyDto();

	protected override async Task OnInitializedAsync()
	{
		var response = await authorService.GetAuthor(Id);
		if(response.Success)
		{
			Author = response.Data;
		}
	}

	private void BackToList() {
		navManager.NavigateTo("/authors/");
	}
	
	private void GoToEdit() {
		navManager.NavigateTo($"/authors/update/{Author.Id}");
	}
}
